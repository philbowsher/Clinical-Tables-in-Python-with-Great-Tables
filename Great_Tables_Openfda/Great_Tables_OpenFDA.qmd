---
output: html_document
---

```{python}
import polars as pl
import polars.selectors as cs
from great_tables import GT, md, vals
from datetime import datetime
import json as js
import urllib as ulib
import json
import matplotlib.pyplot as plt
import numpy as np
from operator import itemgetter
import pandas as pd
import requests

#%matplotlib inline   
```

## This will create the openfda table using 2 code blocks, 1 for data and 1 for the great_tables

```{python}

def get_openfda_data(endpoint, query_params):
    base_url = "https://api.fda.gov"
    try:
        url = f"{base_url}/{endpoint}.json"
        response = requests.get(url, params=query_params)
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            print(f"Error: {response.status_code}")
            return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Define endpoint and query parameters
endpoint = "drug/event"
query_params = {
    "search": "patient.drug.medicinalproduct:tylenol",
    "limit": 10,
}

# Fetch data from OpenFDA
data = get_openfda_data(endpoint, query_params)

# Prepare the data
report_ids = []
adverse_events = []

if data and "results" in data:
    for event in data["results"]:
        report_ids.append(event["safetyreportid"])
        events = [reaction["reactionmeddrapt"] for reaction in event.get("patient", {}).get("reaction", [])]
        adverse_events.append(", ".join(events))
else:
    print("No data retrieved or error in response structure.")
```


```{python}
# Creating a DataFrame and the GreatTable
import pandas as pd
from great_tables import GT, md

# Construct the DataFrame
df = pd.DataFrame({"Report ID": report_ids, "Adverse Events": adverse_events})

# Create and configure the table using GreatTable
GT(df).tab_header(
    title="Adverse Events for Tylenol",
    subtitle="Top 10 adverse event reports retrieved from OpenFDA"
).tab_stub(
    rowname_col="Report ID"
).tab_stubhead(
    label="Report Details"
).tab_source_note(
    source_note=md("Data obtained from the OpenFDA database.")
)
```
## This part containts the data prep and great_tables in one code block

```{python}

import requests
import pandas as pd
from great_tables import GT, md

def get_openfda_data(endpoint, query_params):
    base_url = "https://api.fda.gov"
    try:
        url = f"{base_url}/{endpoint}.json"
        response = requests.get(url, params=query_params)
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            print(f"Error: {response.status_code}")
            return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Define endpoint and query parameters
endpoint = "drug/event"
query_params = {
    "search": "patient.drug.medicinalproduct:tylenol",
    "limit": 1000,  # Set limit to 1000 records
}

# Fetch data from OpenFDA
data = get_openfda_data(endpoint, query_params)

# Prepare the data for male and female
records = []

if data and "results" in data:
    for event in data["results"]:
        gender_code = event.get("patient", {}).get("patientsex", None)
        gender = "Male" if gender_code == "1" else "Female" if gender_code == "2" else "Unknown"
        events = [reaction["reactionmeddrapt"] for reaction in event.get("patient", {}).get("reaction", [])]
        
        for ev in events:
            records.append({
                "Adverse Event": ev,
                "Gender": gender
            })
else:
    print("No data retrieved or error in response structure.")

# Create DataFrame from records
df = pd.DataFrame(records)

# Pivot and count occurrences by gender
pivot_df = df.pivot_table(
    index='Adverse Event', 
    columns='Gender', 
    aggfunc='size', 
    fill_value=0
).reset_index()

# Calculate a total count across all genders
pivot_df['Total'] = pivot_df.select_dtypes(include=['number']).sum(axis=1)

# Sort by the total count and select the top 10
top10_df = pivot_df.sort_values(by='Total', ascending=False).head(10)

# Create and configure the table using GreatTable
GT(top10_df).tab_header(
    title="Top 10 Adverse Events for Tylenol by Gender",
    subtitle="Most frequent adverse event reports for male and female patients retrieved from OpenFDA"
).tab_stub(
    rowname_col="Adverse Event"
).tab_stubhead(
    label="Patient Reaction"
).tab_source_note(
    source_note=md("Data obtained from the OpenFDA database of 1000 data points.")
)
```